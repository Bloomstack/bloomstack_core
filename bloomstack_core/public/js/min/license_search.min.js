(function () {
    'use strict';

    var FormField = {
        inheritAttrs: false,
        props: {
            label: String,
            value: [String, Number]
        },
        methods: {
            updateValue: function updateValue(event) {
                this.$emit('input', event.target.value);
            }
        }
    };

    //

    var script = {
        mixins: [FormField]

    };

    /* script */
                var __vue_script__ = script;
                
    /* template */
    var __vue_render__ = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _vm.label
          ? _c("label", { attrs: { for: _vm.label } }, [_vm._v(_vm._s(_vm.label))])
          : _vm._e(),
        _vm._v(" "),
        _c(
          "input",
          _vm._b(
            {
              attrs: { id: _vm.label },
              domProps: { value: _vm.value },
              on: { input: _vm.updateValue }
            },
            "input",
            _vm.$attrs,
            false
          )
        )
      ])
    };
    var __vue_staticRenderFns__ = [];
    __vue_render__._withStripped = true;

      /* style */
      var __vue_inject_styles__ = undefined;
      /* scoped */
      var __vue_scope_id__ = undefined;
      /* functional template */
      var __vue_is_functional_template__ = false;
      /* component normalizer */
      function __vue_normalize__(
        template, style, script,
        scope, functional, moduleIdentifier,
        createInjector, createInjectorSSR
      ) {
        var component = (typeof script === 'function' ? script.options : script) || {};

        // For security concerns, we use only base name in production mode.
        component.__file = "/Users/jitendraharpalani/Jeet/workspace/bloomstack/apps/bloomstack_core/bloomstack_core/public/js/bloomstack_core/components/input.vue";

        if (!component.render) {
          component.render = template.render;
          component.staticRenderFns = template.staticRenderFns;
          component._compiled = true;

          if (functional) { component.functional = true; }
        }

        component._scopeId = scope;

        return component
      }
      /* style inject */
      
      /* style inject SSR */
      

      
      var Input = __vue_normalize__(
        { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
        __vue_inject_styles__,
        __vue_script__,
        __vue_scope_id__,
        __vue_is_functional_template__);

    //

    var script$1 = {
        mixins: [FormField],
        props: {
            options: Array,
        }
    };

    /* script */
                var __vue_script__$1 = script$1;
                
    /* template */
    var __vue_render__$1 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _vm.label
          ? _c("label", { attrs: { for: _vm.label } }, [_vm._v(_vm._s(_vm.label))])
          : _vm._e(),
        _vm._v(" "),
        _c(
          "select",
          { attrs: { id: _vm.label }, on: { change: _vm.updateValue } },
          _vm._l(_vm.options, function(option) {
            return _c("option", { domProps: { selected: option === _vm.value } }, [
              _vm._v(_vm._s(option))
            ])
          }),
          0
        )
      ])
    };
    var __vue_staticRenderFns__$1 = [];
    __vue_render__$1._withStripped = true;

      /* style */
      var __vue_inject_styles__$1 = undefined;
      /* scoped */
      var __vue_scope_id__$1 = undefined;
      /* functional template */
      var __vue_is_functional_template__$1 = false;
      /* component normalizer */
      function __vue_normalize__$1(
        template, style, script,
        scope, functional, moduleIdentifier,
        createInjector, createInjectorSSR
      ) {
        var component = (typeof script === 'function' ? script.options : script) || {};

        // For security concerns, we use only base name in production mode.
        component.__file = "/Users/jitendraharpalani/Jeet/workspace/bloomstack/apps/bloomstack_core/bloomstack_core/public/js/bloomstack_core/components/select.vue";

        if (!component.render) {
          component.render = template.render;
          component.staticRenderFns = template.staticRenderFns;
          component._compiled = true;

          if (functional) { component.functional = true; }
        }

        component._scopeId = scope;

        return component
      }
      /* style inject */
      
      /* style inject SSR */
      

      
      var Select = __vue_normalize__$1(
        { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
        __vue_inject_styles__$1,
        __vue_script__$1,
        __vue_scope_id__$1,
        __vue_is_functional_template__$1);

    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var vuex = createCommonjsModule(function (module, exports) {
    /*!
     * vuex v3.5.1
     * (c) 2020 Evan You
     * @license MIT
     */
    (function (global, factory) {
       module.exports = factory() ;
    }(commonjsGlobal, (function () {
      function applyMixin (Vue) {
        var version = Number(Vue.version.split('.')[0]);

        if (version >= 2) {
          Vue.mixin({ beforeCreate: vuexInit });
        } else {
          // override init and inject vuex init procedure
          // for 1.x backwards compatibility.
          var _init = Vue.prototype._init;
          Vue.prototype._init = function (options) {
            if ( options === void 0 ) { options = {}; }

            options.init = options.init
              ? [vuexInit].concat(options.init)
              : vuexInit;
            _init.call(this, options);
          };
        }

        /**
         * Vuex init hook, injected into each instances init hooks list.
         */

        function vuexInit () {
          var options = this.$options;
          // store injection
          if (options.store) {
            this.$store = typeof options.store === 'function'
              ? options.store()
              : options.store;
          } else if (options.parent && options.parent.$store) {
            this.$store = options.parent.$store;
          }
        }
      }

      var target = typeof window !== 'undefined'
        ? window
        : typeof commonjsGlobal !== 'undefined'
          ? commonjsGlobal
          : {};
      var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

      function devtoolPlugin (store) {
        if (!devtoolHook) { return }

        store._devtoolHook = devtoolHook;

        devtoolHook.emit('vuex:init', store);

        devtoolHook.on('vuex:travel-to-state', function (targetState) {
          store.replaceState(targetState);
        });

        store.subscribe(function (mutation, state) {
          devtoolHook.emit('vuex:mutation', mutation, state);
        }, { prepend: true });

        store.subscribeAction(function (action, state) {
          devtoolHook.emit('vuex:action', action, state);
        }, { prepend: true });
      }

      /**
       * Get the first item that pass the test
       * by second argument function
       *
       * @param {Array} list
       * @param {Function} f
       * @return {*}
       */
      function find (list, f) {
        return list.filter(f)[0]
      }

      /**
       * Deep copy the given object considering circular structure.
       * This function caches all nested objects and its copies.
       * If it detects circular structure, use cached copy to avoid infinite loop.
       *
       * @param {*} obj
       * @param {Array<Object>} cache
       * @return {*}
       */
      function deepCopy (obj, cache) {
        if ( cache === void 0 ) { cache = []; }

        // just return if obj is immutable value
        if (obj === null || typeof obj !== 'object') {
          return obj
        }

        // if obj is hit, it is in circular structure
        var hit = find(cache, function (c) { return c.original === obj; });
        if (hit) {
          return hit.copy
        }

        var copy = Array.isArray(obj) ? [] : {};
        // put the copy into cache at first
        // because we want to refer it in recursive deepCopy
        cache.push({
          original: obj,
          copy: copy
        });

        Object.keys(obj).forEach(function (key) {
          copy[key] = deepCopy(obj[key], cache);
        });

        return copy
      }

      /**
       * forEach for object
       */
      function forEachValue (obj, fn) {
        Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
      }

      function isObject (obj) {
        return obj !== null && typeof obj === 'object'
      }

      function isPromise (val) {
        return val && typeof val.then === 'function'
      }

      function assert (condition, msg) {
        if (!condition) { throw new Error(("[vuex] " + msg)) }
      }

      function partial (fn, arg) {
        return function () {
          return fn(arg)
        }
      }

      // Base data struct for store's module, package with some attribute and method
      var Module = function Module (rawModule, runtime) {
        this.runtime = runtime;
        // Store some children item
        this._children = Object.create(null);
        // Store the origin module object which passed by programmer
        this._rawModule = rawModule;
        var rawState = rawModule.state;

        // Store the origin module's state
        this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
      };

      var prototypeAccessors = { namespaced: { configurable: true } };

      prototypeAccessors.namespaced.get = function () {
        return !!this._rawModule.namespaced
      };

      Module.prototype.addChild = function addChild (key, module) {
        this._children[key] = module;
      };

      Module.prototype.removeChild = function removeChild (key) {
        delete this._children[key];
      };

      Module.prototype.getChild = function getChild (key) {
        return this._children[key]
      };

      Module.prototype.hasChild = function hasChild (key) {
        return key in this._children
      };

      Module.prototype.update = function update (rawModule) {
        this._rawModule.namespaced = rawModule.namespaced;
        if (rawModule.actions) {
          this._rawModule.actions = rawModule.actions;
        }
        if (rawModule.mutations) {
          this._rawModule.mutations = rawModule.mutations;
        }
        if (rawModule.getters) {
          this._rawModule.getters = rawModule.getters;
        }
      };

      Module.prototype.forEachChild = function forEachChild (fn) {
        forEachValue(this._children, fn);
      };

      Module.prototype.forEachGetter = function forEachGetter (fn) {
        if (this._rawModule.getters) {
          forEachValue(this._rawModule.getters, fn);
        }
      };

      Module.prototype.forEachAction = function forEachAction (fn) {
        if (this._rawModule.actions) {
          forEachValue(this._rawModule.actions, fn);
        }
      };

      Module.prototype.forEachMutation = function forEachMutation (fn) {
        if (this._rawModule.mutations) {
          forEachValue(this._rawModule.mutations, fn);
        }
      };

      Object.defineProperties( Module.prototype, prototypeAccessors );

      var ModuleCollection = function ModuleCollection (rawRootModule) {
        // register root module (Vuex.Store options)
        this.register([], rawRootModule, false);
      };

      ModuleCollection.prototype.get = function get (path) {
        return path.reduce(function (module, key) {
          return module.getChild(key)
        }, this.root)
      };

      ModuleCollection.prototype.getNamespace = function getNamespace (path) {
        var module = this.root;
        return path.reduce(function (namespace, key) {
          module = module.getChild(key);
          return namespace + (module.namespaced ? key + '/' : '')
        }, '')
      };

      ModuleCollection.prototype.update = function update$1 (rawRootModule) {
        update([], this.root, rawRootModule);
      };

      ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
          var this$1 = this;
          if ( runtime === void 0 ) { runtime = true; }

        {
          assertRawModule(path, rawModule);
        }

        var newModule = new Module(rawModule, runtime);
        if (path.length === 0) {
          this.root = newModule;
        } else {
          var parent = this.get(path.slice(0, -1));
          parent.addChild(path[path.length - 1], newModule);
        }

        // register nested modules
        if (rawModule.modules) {
          forEachValue(rawModule.modules, function (rawChildModule, key) {
            this$1.register(path.concat(key), rawChildModule, runtime);
          });
        }
      };

      ModuleCollection.prototype.unregister = function unregister (path) {
        var parent = this.get(path.slice(0, -1));
        var key = path[path.length - 1];
        var child = parent.getChild(key);

        if (!child) {
          {
            console.warn(
              "[vuex] trying to unregister module '" + key + "', which is " +
              "not registered"
            );
          }
          return
        }

        if (!child.runtime) {
          return
        }

        parent.removeChild(key);
      };

      ModuleCollection.prototype.isRegistered = function isRegistered (path) {
        var parent = this.get(path.slice(0, -1));
        var key = path[path.length - 1];

        return parent.hasChild(key)
      };

      function update (path, targetModule, newModule) {
        {
          assertRawModule(path, newModule);
        }

        // update target module
        targetModule.update(newModule);

        // update nested modules
        if (newModule.modules) {
          for (var key in newModule.modules) {
            if (!targetModule.getChild(key)) {
              {
                console.warn(
                  "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
                  'manual reload is needed'
                );
              }
              return
            }
            update(
              path.concat(key),
              targetModule.getChild(key),
              newModule.modules[key]
            );
          }
        }
      }

      var functionAssert = {
        assert: function (value) { return typeof value === 'function'; },
        expected: 'function'
      };

      var objectAssert = {
        assert: function (value) { return typeof value === 'function' ||
          (typeof value === 'object' && typeof value.handler === 'function'); },
        expected: 'function or object with "handler" function'
      };

      var assertTypes = {
        getters: functionAssert,
        mutations: functionAssert,
        actions: objectAssert
      };

      function assertRawModule (path, rawModule) {
        Object.keys(assertTypes).forEach(function (key) {
          if (!rawModule[key]) { return }

          var assertOptions = assertTypes[key];

          forEachValue(rawModule[key], function (value, type) {
            assert(
              assertOptions.assert(value),
              makeAssertionMessage(path, key, type, value, assertOptions.expected)
            );
          });
        });
      }

      function makeAssertionMessage (path, key, type, value, expected) {
        var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
        if (path.length > 0) {
          buf += " in module \"" + (path.join('.')) + "\"";
        }
        buf += " is " + (JSON.stringify(value)) + ".";
        return buf
      }

      var Vue; // bind on install

      var Store = function Store (options) {
        var this$1 = this;
        if ( options === void 0 ) { options = {}; }

        // Auto install if it is not done yet and `window` has `Vue`.
        // To allow users to avoid auto-installation in some cases,
        // this code should be placed here. See #731
        if (!Vue && typeof window !== 'undefined' && window.Vue) {
          install(window.Vue);
        }

        {
          assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
          assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
          assert(this instanceof Store, "store must be called with the new operator.");
        }

        var plugins = options.plugins; if ( plugins === void 0 ) { plugins = []; }
        var strict = options.strict; if ( strict === void 0 ) { strict = false; }

        // store internal state
        this._committing = false;
        this._actions = Object.create(null);
        this._actionSubscribers = [];
        this._mutations = Object.create(null);
        this._wrappedGetters = Object.create(null);
        this._modules = new ModuleCollection(options);
        this._modulesNamespaceMap = Object.create(null);
        this._subscribers = [];
        this._watcherVM = new Vue();
        this._makeLocalGettersCache = Object.create(null);

        // bind commit and dispatch to self
        var store = this;
        var ref = this;
        var dispatch = ref.dispatch;
        var commit = ref.commit;
        this.dispatch = function boundDispatch (type, payload) {
          return dispatch.call(store, type, payload)
        };
        this.commit = function boundCommit (type, payload, options) {
          return commit.call(store, type, payload, options)
        };

        // strict mode
        this.strict = strict;

        var state = this._modules.root.state;

        // init root module.
        // this also recursively registers all sub-modules
        // and collects all module getters inside this._wrappedGetters
        installModule(this, state, [], this._modules.root);

        // initialize the store vm, which is responsible for the reactivity
        // (also registers _wrappedGetters as computed properties)
        resetStoreVM(this, state);

        // apply plugins
        plugins.forEach(function (plugin) { return plugin(this$1); });

        var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
        if (useDevtools) {
          devtoolPlugin(this);
        }
      };

      var prototypeAccessors$1 = { state: { configurable: true } };

      prototypeAccessors$1.state.get = function () {
        return this._vm._data.$$state
      };

      prototypeAccessors$1.state.set = function (v) {
        {
          assert(false, "use store.replaceState() to explicit replace store state.");
        }
      };

      Store.prototype.commit = function commit (_type, _payload, _options) {
          var this$1 = this;

        // check object-style commit
        var ref = unifyObjectStyle(_type, _payload, _options);
          var type = ref.type;
          var payload = ref.payload;
          var options = ref.options;

        var mutation = { type: type, payload: payload };
        var entry = this._mutations[type];
        if (!entry) {
          {
            console.error(("[vuex] unknown mutation type: " + type));
          }
          return
        }
        this._withCommit(function () {
          entry.forEach(function commitIterator (handler) {
            handler(payload);
          });
        });

        this._subscribers
          .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
          .forEach(function (sub) { return sub(mutation, this$1.state); });

        if (
          
          options && options.silent
        ) {
          console.warn(
            "[vuex] mutation type: " + type + ". Silent option has been removed. " +
            'Use the filter functionality in the vue-devtools'
          );
        }
      };

      Store.prototype.dispatch = function dispatch (_type, _payload) {
          var this$1 = this;

        // check object-style dispatch
        var ref = unifyObjectStyle(_type, _payload);
          var type = ref.type;
          var payload = ref.payload;

        var action = { type: type, payload: payload };
        var entry = this._actions[type];
        if (!entry) {
          {
            console.error(("[vuex] unknown action type: " + type));
          }
          return
        }

        try {
          this._actionSubscribers
            .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
            .filter(function (sub) { return sub.before; })
            .forEach(function (sub) { return sub.before(action, this$1.state); });
        } catch (e) {
          {
            console.warn("[vuex] error in before action subscribers: ");
            console.error(e);
          }
        }

        var result = entry.length > 1
          ? Promise.all(entry.map(function (handler) { return handler(payload); }))
          : entry[0](payload);

        return new Promise(function (resolve, reject) {
          result.then(function (res) {
            try {
              this$1._actionSubscribers
                .filter(function (sub) { return sub.after; })
                .forEach(function (sub) { return sub.after(action, this$1.state); });
            } catch (e) {
              {
                console.warn("[vuex] error in after action subscribers: ");
                console.error(e);
              }
            }
            resolve(res);
          }, function (error) {
            try {
              this$1._actionSubscribers
                .filter(function (sub) { return sub.error; })
                .forEach(function (sub) { return sub.error(action, this$1.state, error); });
            } catch (e) {
              {
                console.warn("[vuex] error in error action subscribers: ");
                console.error(e);
              }
            }
            reject(error);
          });
        })
      };

      Store.prototype.subscribe = function subscribe (fn, options) {
        return genericSubscribe(fn, this._subscribers, options)
      };

      Store.prototype.subscribeAction = function subscribeAction (fn, options) {
        var subs = typeof fn === 'function' ? { before: fn } : fn;
        return genericSubscribe(subs, this._actionSubscribers, options)
      };

      Store.prototype.watch = function watch (getter, cb, options) {
          var this$1 = this;

        {
          assert(typeof getter === 'function', "store.watch only accepts a function.");
        }
        return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
      };

      Store.prototype.replaceState = function replaceState (state) {
          var this$1 = this;

        this._withCommit(function () {
          this$1._vm._data.$$state = state;
        });
      };

      Store.prototype.registerModule = function registerModule (path, rawModule, options) {
          if ( options === void 0 ) { options = {}; }

        if (typeof path === 'string') { path = [path]; }

        {
          assert(Array.isArray(path), "module path must be a string or an Array.");
          assert(path.length > 0, 'cannot register the root module by using registerModule.');
        }

        this._modules.register(path, rawModule);
        installModule(this, this.state, path, this._modules.get(path), options.preserveState);
        // reset store to update getters...
        resetStoreVM(this, this.state);
      };

      Store.prototype.unregisterModule = function unregisterModule (path) {
          var this$1 = this;

        if (typeof path === 'string') { path = [path]; }

        {
          assert(Array.isArray(path), "module path must be a string or an Array.");
        }

        this._modules.unregister(path);
        this._withCommit(function () {
          var parentState = getNestedState(this$1.state, path.slice(0, -1));
          Vue.delete(parentState, path[path.length - 1]);
        });
        resetStore(this);
      };

      Store.prototype.hasModule = function hasModule (path) {
        if (typeof path === 'string') { path = [path]; }

        {
          assert(Array.isArray(path), "module path must be a string or an Array.");
        }

        return this._modules.isRegistered(path)
      };

      Store.prototype.hotUpdate = function hotUpdate (newOptions) {
        this._modules.update(newOptions);
        resetStore(this, true);
      };

      Store.prototype._withCommit = function _withCommit (fn) {
        var committing = this._committing;
        this._committing = true;
        fn();
        this._committing = committing;
      };

      Object.defineProperties( Store.prototype, prototypeAccessors$1 );

      function genericSubscribe (fn, subs, options) {
        if (subs.indexOf(fn) < 0) {
          options && options.prepend
            ? subs.unshift(fn)
            : subs.push(fn);
        }
        return function () {
          var i = subs.indexOf(fn);
          if (i > -1) {
            subs.splice(i, 1);
          }
        }
      }

      function resetStore (store, hot) {
        store._actions = Object.create(null);
        store._mutations = Object.create(null);
        store._wrappedGetters = Object.create(null);
        store._modulesNamespaceMap = Object.create(null);
        var state = store.state;
        // init all modules
        installModule(store, state, [], store._modules.root, true);
        // reset vm
        resetStoreVM(store, state, hot);
      }

      function resetStoreVM (store, state, hot) {
        var oldVm = store._vm;

        // bind store public getters
        store.getters = {};
        // reset local getters cache
        store._makeLocalGettersCache = Object.create(null);
        var wrappedGetters = store._wrappedGetters;
        var computed = {};
        forEachValue(wrappedGetters, function (fn, key) {
          // use computed to leverage its lazy-caching mechanism
          // direct inline function use will lead to closure preserving oldVm.
          // using partial to return function with only arguments preserved in closure environment.
          computed[key] = partial(fn, store);
          Object.defineProperty(store.getters, key, {
            get: function () { return store._vm[key]; },
            enumerable: true // for local getters
          });
        });

        // use a Vue instance to store the state tree
        // suppress warnings just in case the user has added
        // some funky global mixins
        var silent = Vue.config.silent;
        Vue.config.silent = true;
        store._vm = new Vue({
          data: {
            $$state: state
          },
          computed: computed
        });
        Vue.config.silent = silent;

        // enable strict mode for new vm
        if (store.strict) {
          enableStrictMode(store);
        }

        if (oldVm) {
          if (hot) {
            // dispatch changes in all subscribed watchers
            // to force getter re-evaluation for hot reloading.
            store._withCommit(function () {
              oldVm._data.$$state = null;
            });
          }
          Vue.nextTick(function () { return oldVm.$destroy(); });
        }
      }

      function installModule (store, rootState, path, module, hot) {
        var isRoot = !path.length;
        var namespace = store._modules.getNamespace(path);

        // register in namespace map
        if (module.namespaced) {
          if (store._modulesNamespaceMap[namespace] && true) {
            console.error(("[vuex] duplicate namespace " + namespace + " for the namespaced module " + (path.join('/'))));
          }
          store._modulesNamespaceMap[namespace] = module;
        }

        // set state
        if (!isRoot && !hot) {
          var parentState = getNestedState(rootState, path.slice(0, -1));
          var moduleName = path[path.length - 1];
          store._withCommit(function () {
            {
              if (moduleName in parentState) {
                console.warn(
                  ("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + (path.join('.')) + "\"")
                );
              }
            }
            Vue.set(parentState, moduleName, module.state);
          });
        }

        var local = module.context = makeLocalContext(store, namespace, path);

        module.forEachMutation(function (mutation, key) {
          var namespacedType = namespace + key;
          registerMutation(store, namespacedType, mutation, local);
        });

        module.forEachAction(function (action, key) {
          var type = action.root ? key : namespace + key;
          var handler = action.handler || action;
          registerAction(store, type, handler, local);
        });

        module.forEachGetter(function (getter, key) {
          var namespacedType = namespace + key;
          registerGetter(store, namespacedType, getter, local);
        });

        module.forEachChild(function (child, key) {
          installModule(store, rootState, path.concat(key), child, hot);
        });
      }

      /**
       * make localized dispatch, commit, getters and state
       * if there is no namespace, just use root ones
       */
      function makeLocalContext (store, namespace, path) {
        var noNamespace = namespace === '';

        var local = {
          dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
            var args = unifyObjectStyle(_type, _payload, _options);
            var payload = args.payload;
            var options = args.options;
            var type = args.type;

            if (!options || !options.root) {
              type = namespace + type;
              if ( !store._actions[type]) {
                console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
                return
              }
            }

            return store.dispatch(type, payload)
          },

          commit: noNamespace ? store.commit : function (_type, _payload, _options) {
            var args = unifyObjectStyle(_type, _payload, _options);
            var payload = args.payload;
            var options = args.options;
            var type = args.type;

            if (!options || !options.root) {
              type = namespace + type;
              if ( !store._mutations[type]) {
                console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
                return
              }
            }

            store.commit(type, payload, options);
          }
        };

        // getters and state object must be gotten lazily
        // because they will be changed by vm update
        Object.defineProperties(local, {
          getters: {
            get: noNamespace
              ? function () { return store.getters; }
              : function () { return makeLocalGetters(store, namespace); }
          },
          state: {
            get: function () { return getNestedState(store.state, path); }
          }
        });

        return local
      }

      function makeLocalGetters (store, namespace) {
        if (!store._makeLocalGettersCache[namespace]) {
          var gettersProxy = {};
          var splitPos = namespace.length;
          Object.keys(store.getters).forEach(function (type) {
            // skip if the target getter is not match this namespace
            if (type.slice(0, splitPos) !== namespace) { return }

            // extract local getter type
            var localType = type.slice(splitPos);

            // Add a port to the getters proxy.
            // Define as getter property because
            // we do not want to evaluate the getters in this time.
            Object.defineProperty(gettersProxy, localType, {
              get: function () { return store.getters[type]; },
              enumerable: true
            });
          });
          store._makeLocalGettersCache[namespace] = gettersProxy;
        }

        return store._makeLocalGettersCache[namespace]
      }

      function registerMutation (store, type, handler, local) {
        var entry = store._mutations[type] || (store._mutations[type] = []);
        entry.push(function wrappedMutationHandler (payload) {
          handler.call(store, local.state, payload);
        });
      }

      function registerAction (store, type, handler, local) {
        var entry = store._actions[type] || (store._actions[type] = []);
        entry.push(function wrappedActionHandler (payload) {
          var res = handler.call(store, {
            dispatch: local.dispatch,
            commit: local.commit,
            getters: local.getters,
            state: local.state,
            rootGetters: store.getters,
            rootState: store.state
          }, payload);
          if (!isPromise(res)) {
            res = Promise.resolve(res);
          }
          if (store._devtoolHook) {
            return res.catch(function (err) {
              store._devtoolHook.emit('vuex:error', err);
              throw err
            })
          } else {
            return res
          }
        });
      }

      function registerGetter (store, type, rawGetter, local) {
        if (store._wrappedGetters[type]) {
          {
            console.error(("[vuex] duplicate getter key: " + type));
          }
          return
        }
        store._wrappedGetters[type] = function wrappedGetter (store) {
          return rawGetter(
            local.state, // local state
            local.getters, // local getters
            store.state, // root state
            store.getters // root getters
          )
        };
      }

      function enableStrictMode (store) {
        store._vm.$watch(function () { return this._data.$$state }, function () {
          {
            assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
          }
        }, { deep: true, sync: true });
      }

      function getNestedState (state, path) {
        return path.reduce(function (state, key) { return state[key]; }, state)
      }

      function unifyObjectStyle (type, payload, options) {
        if (isObject(type) && type.type) {
          options = payload;
          payload = type;
          type = type.type;
        }

        {
          assert(typeof type === 'string', ("expects string as the type, but found " + (typeof type) + "."));
        }

        return { type: type, payload: payload, options: options }
      }

      function install (_Vue) {
        if (Vue && _Vue === Vue) {
          {
            console.error(
              '[vuex] already installed. Vue.use(Vuex) should be called only once.'
            );
          }
          return
        }
        Vue = _Vue;
        applyMixin(Vue);
      }

      /**
       * Reduce the code which written in Vue.js for getting the state.
       * @param {String} [namespace] - Module's namespace
       * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
       * @param {Object}
       */
      var mapState = normalizeNamespace(function (namespace, states) {
        var res = {};
        if ( !isValidMap(states)) {
          console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
        }
        normalizeMap(states).forEach(function (ref) {
          var key = ref.key;
          var val = ref.val;

          res[key] = function mappedState () {
            var state = this.$store.state;
            var getters = this.$store.getters;
            if (namespace) {
              var module = getModuleByNamespace(this.$store, 'mapState', namespace);
              if (!module) {
                return
              }
              state = module.context.state;
              getters = module.context.getters;
            }
            return typeof val === 'function'
              ? val.call(this, state, getters)
              : state[val]
          };
          // mark vuex getter for devtools
          res[key].vuex = true;
        });
        return res
      });

      /**
       * Reduce the code which written in Vue.js for committing the mutation
       * @param {String} [namespace] - Module's namespace
       * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
       * @return {Object}
       */
      var mapMutations = normalizeNamespace(function (namespace, mutations) {
        var res = {};
        if ( !isValidMap(mutations)) {
          console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
        }
        normalizeMap(mutations).forEach(function (ref) {
          var key = ref.key;
          var val = ref.val;

          res[key] = function mappedMutation () {
            var arguments$1 = arguments;

            var args = [], len = arguments.length;
            while ( len-- ) { args[ len ] = arguments$1[ len ]; }

            // Get the commit method from store
            var commit = this.$store.commit;
            if (namespace) {
              var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
              if (!module) {
                return
              }
              commit = module.context.commit;
            }
            return typeof val === 'function'
              ? val.apply(this, [commit].concat(args))
              : commit.apply(this.$store, [val].concat(args))
          };
        });
        return res
      });

      /**
       * Reduce the code which written in Vue.js for getting the getters
       * @param {String} [namespace] - Module's namespace
       * @param {Object|Array} getters
       * @return {Object}
       */
      var mapGetters = normalizeNamespace(function (namespace, getters) {
        var res = {};
        if ( !isValidMap(getters)) {
          console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
        }
        normalizeMap(getters).forEach(function (ref) {
          var key = ref.key;
          var val = ref.val;

          // The namespace has been mutated by normalizeNamespace
          val = namespace + val;
          res[key] = function mappedGetter () {
            if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
              return
            }
            if ( !(val in this.$store.getters)) {
              console.error(("[vuex] unknown getter: " + val));
              return
            }
            return this.$store.getters[val]
          };
          // mark vuex getter for devtools
          res[key].vuex = true;
        });
        return res
      });

      /**
       * Reduce the code which written in Vue.js for dispatch the action
       * @param {String} [namespace] - Module's namespace
       * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
       * @return {Object}
       */
      var mapActions = normalizeNamespace(function (namespace, actions) {
        var res = {};
        if ( !isValidMap(actions)) {
          console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
        }
        normalizeMap(actions).forEach(function (ref) {
          var key = ref.key;
          var val = ref.val;

          res[key] = function mappedAction () {
            var arguments$1 = arguments;

            var args = [], len = arguments.length;
            while ( len-- ) { args[ len ] = arguments$1[ len ]; }

            // get dispatch function from store
            var dispatch = this.$store.dispatch;
            if (namespace) {
              var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
              if (!module) {
                return
              }
              dispatch = module.context.dispatch;
            }
            return typeof val === 'function'
              ? val.apply(this, [dispatch].concat(args))
              : dispatch.apply(this.$store, [val].concat(args))
          };
        });
        return res
      });

      /**
       * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
       * @param {String} namespace
       * @return {Object}
       */
      var createNamespacedHelpers = function (namespace) { return ({
        mapState: mapState.bind(null, namespace),
        mapGetters: mapGetters.bind(null, namespace),
        mapMutations: mapMutations.bind(null, namespace),
        mapActions: mapActions.bind(null, namespace)
      }); };

      /**
       * Normalize the map
       * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
       * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
       * @param {Array|Object} map
       * @return {Object}
       */
      function normalizeMap (map) {
        if (!isValidMap(map)) {
          return []
        }
        return Array.isArray(map)
          ? map.map(function (key) { return ({ key: key, val: key }); })
          : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
      }

      /**
       * Validate whether given map is valid or not
       * @param {*} map
       * @return {Boolean}
       */
      function isValidMap (map) {
        return Array.isArray(map) || isObject(map)
      }

      /**
       * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
       * @param {Function} fn
       * @return {Function}
       */
      function normalizeNamespace (fn) {
        return function (namespace, map) {
          if (typeof namespace !== 'string') {
            map = namespace;
            namespace = '';
          } else if (namespace.charAt(namespace.length - 1) !== '/') {
            namespace += '/';
          }
          return fn(namespace, map)
        }
      }

      /**
       * Search a special module from store by namespace. if module not exist, print error message.
       * @param {Object} store
       * @param {String} helper
       * @param {String} namespace
       * @return {Object}
       */
      function getModuleByNamespace (store, helper, namespace) {
        var module = store._modulesNamespaceMap[namespace];
        if ( !module) {
          console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
        }
        return module
      }

      // Credits: borrowed code from fcomb/redux-logger

      function createLogger (ref) {
        if ( ref === void 0 ) { ref = {}; }
        var collapsed = ref.collapsed; if ( collapsed === void 0 ) { collapsed = true; }
        var filter = ref.filter; if ( filter === void 0 ) { filter = function (mutation, stateBefore, stateAfter) { return true; }; }
        var transformer = ref.transformer; if ( transformer === void 0 ) { transformer = function (state) { return state; }; }
        var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) { mutationTransformer = function (mut) { return mut; }; }
        var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) { actionFilter = function (action, state) { return true; }; }
        var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) { actionTransformer = function (act) { return act; }; }
        var logMutations = ref.logMutations; if ( logMutations === void 0 ) { logMutations = true; }
        var logActions = ref.logActions; if ( logActions === void 0 ) { logActions = true; }
        var logger = ref.logger; if ( logger === void 0 ) { logger = console; }

        return function (store) {
          var prevState = deepCopy(store.state);

          if (typeof logger === 'undefined') {
            return
          }

          if (logMutations) {
            store.subscribe(function (mutation, state) {
              var nextState = deepCopy(state);

              if (filter(mutation, prevState, nextState)) {
                var formattedTime = getFormattedTime();
                var formattedMutation = mutationTransformer(mutation);
                var message = "mutation " + (mutation.type) + formattedTime;

                startMessage(logger, message, collapsed);
                logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
                logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
                logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
                endMessage(logger);
              }

              prevState = nextState;
            });
          }

          if (logActions) {
            store.subscribeAction(function (action, state) {
              if (actionFilter(action, state)) {
                var formattedTime = getFormattedTime();
                var formattedAction = actionTransformer(action);
                var message = "action " + (action.type) + formattedTime;

                startMessage(logger, message, collapsed);
                logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
                endMessage(logger);
              }
            });
          }
        }
      }

      function startMessage (logger, message, collapsed) {
        var startMessage = collapsed
          ? logger.groupCollapsed
          : logger.group;

        // render
        try {
          startMessage.call(logger, message);
        } catch (e) {
          logger.log(message);
        }
      }

      function endMessage (logger) {
        try {
          logger.groupEnd();
        } catch (e) {
          logger.log('—— log end ——');
        }
      }

      function getFormattedTime () {
        var time = new Date();
        return (" @ " + (pad(time.getHours(), 2)) + ":" + (pad(time.getMinutes(), 2)) + ":" + (pad(time.getSeconds(), 2)) + "." + (pad(time.getMilliseconds(), 3)))
      }

      function repeat (str, times) {
        return (new Array(times + 1)).join(str)
      }

      function pad (num, maxLength) {
        return repeat('0', maxLength - num.toString().length) + num
      }

      var index_cjs = {
        Store: Store,
        install: install,
        version: '3.5.1',
        mapState: mapState,
        mapMutations: mapMutations,
        mapGetters: mapGetters,
        mapActions: mapActions,
        createNamespacedHelpers: createNamespacedHelpers,
        createLogger: createLogger
      };

      return index_cjs;

    })));
    });

    //

    var script$2 = {
        components: {
            Input: Input,
            Select: Select
        },
        data: function data() {
            return {
                filters: {
                    search: "",
                    zip: "",
                    licenseType: ""
                }
            }
        },
        computed: Object.assign({}, vuex.mapState(['license'])),
        methods: {
            applyFilters: function applyFilters() {
                this.$store.dispatch("applyFilter", this.filters);
            }
        }
    };

    /* script */
                var __vue_script__$2 = script$2;
                
    /* template */
    var __vue_render__$2 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { staticClass: "license-filter row" }, [
        _c(
          "form",
          {
            on: {
              submit: function($event) {
                $event.preventDefault();
                return _vm.applyFilters($event)
              }
            }
          },
          [
            _c("Input", {
              staticClass: "col-md-6 col-sm-12 col-xs-12 search-box",
              attrs: { type: "text", placeholder: "Search" },
              model: {
                value: _vm.filters.search,
                callback: function($$v) {
                  _vm.$set(_vm.filters, "search", $$v);
                },
                expression: "filters.search"
              }
            }),
            _vm._v(" "),
            _c("Input", {
              staticClass: "col-md-2 col-sm-4 col-xs-4 zip-box",
              attrs: { type: "text", placeholder: "Zipcode" },
              model: {
                value: _vm.filters.zip,
                callback: function($$v) {
                  _vm.$set(_vm.filters, "zip", $$v);
                },
                expression: "filters.zip"
              }
            }),
            _vm._v(" "),
            _c("Select", {
              staticClass: "col-md-3 col-sm-4 col-xs-4 type-select",
              attrs: {
                placeholder: "Type of License",
                options: _vm.license.licenseTypes
              },
              model: {
                value: _vm.filters.licenseType,
                callback: function($$v) {
                  _vm.$set(_vm.filters, "licenseType", $$v);
                },
                expression: "filters.licenseType"
              }
            }),
            _vm._v(" "),
            _vm._m(0)
          ],
          1
        )
      ])
    };
    var __vue_staticRenderFns__$2 = [
      function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "col-md-1 col-sm-4 col-xs-4" }, [
          _c("input", { attrs: { type: "submit", value: "Search" } })
        ])
      }
    ];
    __vue_render__$2._withStripped = true;

      /* style */
      var __vue_inject_styles__$2 = undefined;
      /* scoped */
      var __vue_scope_id__$2 = undefined;
      /* functional template */
      var __vue_is_functional_template__$2 = false;
      /* component normalizer */
      function __vue_normalize__$2(
        template, style, script,
        scope, functional, moduleIdentifier,
        createInjector, createInjectorSSR
      ) {
        var component = (typeof script === 'function' ? script.options : script) || {};

        // For security concerns, we use only base name in production mode.
        component.__file = "/Users/jitendraharpalani/Jeet/workspace/bloomstack/apps/bloomstack_core/bloomstack_core/public/js/bloomstack_core/license_search/components/FilterForm.vue";

        if (!component.render) {
          component.render = template.render;
          component.staticRenderFns = template.staticRenderFns;
          component._compiled = true;

          if (functional) { component.functional = true; }
        }

        component._scopeId = scope;

        return component
      }
      /* style inject */
      
      /* style inject SSR */
      

      
      var FilterForm = __vue_normalize__$2(
        { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
        __vue_inject_styles__$2,
        __vue_script__$2,
        __vue_scope_id__$2,
        __vue_is_functional_template__$2);

    var FrappeService = {
        insertDoc: function insertDoc(ref) {
            var doc = ref.doc;
            var isFieldExist = ref.isFieldExist;

            return new Promise(function (resolve, reject) {
                frappe.db.exists(doc.doctype, doc[isFieldExist]).then(function(response) {
                    if(response) {
                        reject(response);
                        return;
                    }

                    frappe.db.insert(doc).then(function(response) {
                        resolve(response);
                    });
                });
    		});
        }
    };

    //

        var script$3 = {
            props: {
                license: Object
            },
            mounted: function mounted() {
                this.check_entry("Customer");
                this.check_entry("Lead");
                this.check_entry("Supplier");
            },
            data: function data() {
                return {
                    toggle: false,
                    conversion: {
                        "Customer": false,
                        "Lead": false,
                        "Supplier": false
                    }
                }
            },
            computed: {
                address: function address() {
                    var this$1 = this;

                    var addressKeys = ["zip_code", "city", "country"];
                    var address = [];
                    addressKeys.forEach(function (key) {
                        if(this$1.license[key] != "") {
                            address.push(this$1.license[key]);
                        }
                  	});

                  	return (address.join(' | '));
                }
            },
            methods: {
                quick_entry: function quick_entry(doctype, fieldMap) {
                    var mapper = {};
                    for(var field in fieldMap) {
                        var licenseField = fieldMap[field];
                        mapper[field] = this.license[licenseField];
                    }

                    frappe.new_doc(doctype, mapper, function(dialog) {
                        dialog.set_values(mapper);
                    });
                },

                check_entry: function check_entry(doctype) {
                    var this$1 = this;

                    frappe.db.exists(doctype, this.license.legal_name).then(function (response) {
                        this$1.conversion[doctype] = response;
                    });
                },

                make_compliance_info: function(callee) {
                    var complianceInfo = {
                        "doctype": "Compliance Info",
                        "license_number": this.license.license_number
                    };
                    return FrappeService.insertDoc({
                        doc: complianceInfo,
                        isFieldExist: "license_number"
                     }).then(function (res) {
                         callee();
                    }).catch(function (err) {
                        callee();
                    });
                },

                make_customer: function make_customer() {
                    var fieldMap = {
                        customer_name: "legal_name",
                        email_id: "email_id",
                        mobile_no: "phone",
                        license: "license_number"
    			    };

                    this.quick_entry("Customer", fieldMap);
                },

                make_lead: function make_lead() {
                    var fieldMap = {
                        lead_name: "legal_name",
                        email_id: "email_id",
                        company_name: "legal_name",
                        type_of_business: "business_structure"
    			    };

                    this.quick_entry("Lead", fieldMap);
                },

                make_supplier: function make_supplier() {
                    var fieldMap = {
                        supplier_name: "legal_name",
                        license: "license_number"
    			    };

                    this.quick_entry("Supplier", fieldMap);
                }
            }
        };

    /* script */
                var __vue_script__$3 = script$3;
                
    /* template */
    var __vue_render__$3 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        {
          staticClass: "license-card row",
          class: { "is-open": _vm.toggle },
          on: {
            click: function($event) {
              _vm.toggle = !_vm.toggle;
            }
          }
        },
        [
          _vm._m(0),
          _vm._v(" "),
          _c("div", { staticClass: "col-md-9 col-sm-9 col-xs-9" }, [
            _c("div", { staticClass: "row license-info" }, [
              _c("div", { staticClass: "col-md-4 col-sm-6 col-xs-6 legal-name" }, [
                _vm._v(_vm._s(_vm.license.legal_name))
              ]),
              _vm._v(" "),
              _c(
                "div",
                { staticClass: "col-md-4 col-sm-6 col-xs-6 license-number" },
                [_vm._v(_vm._s(_vm.license.license_number))]
              ),
              _vm._v(" "),
              _c(
                "div",
                { staticClass: "col-md-4 col-sm-12 col-xs-12 license-type" },
                [_vm._v(_vm._s(_vm.license.license_type))]
              )
            ]),
            _vm._v(" "),
            _c("div", { staticClass: "row license-info" }, [
              _vm.address ? _c("p", [_vm._v(_vm._s(_vm.address))]) : _vm._e(),
              _vm._v(" "),
              _vm.license.email_id
                ? _c("p", [_vm._v(_vm._s(_vm.license.email_id))])
                : _vm._e(),
              _vm._v(" "),
              _c("p", [
                _vm._v("License expiry: " + _vm._s(_vm.license.expiration_date))
              ])
            ])
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "actions" }, [
            !_vm.conversion["Lead"]
              ? _c(
                  "a",
                  {
                    staticClass: "conversion-actions",
                    attrs: { href: "#" },
                    on: {
                      click: function($event) {
                        $event.preventDefault();
                        return _vm.make_compliance_info(_vm.make_lead)
                      }
                    }
                  },
                  [_vm._v("Convert to lead")]
                )
              : _vm._e(),
            _vm._v(" "),
            !_vm.conversion["Customer"]
              ? _c(
                  "a",
                  {
                    staticClass: "conversion-actions",
                    attrs: { href: "#" },
                    on: {
                      click: function($event) {
                        $event.preventDefault();
                        return _vm.make_compliance_info(_vm.make_customer)
                      }
                    }
                  },
                  [_vm._v("Convert to customer")]
                )
              : _vm._e(),
            _vm._v(" "),
            !_vm.conversion["Supplier"]
              ? _c(
                  "a",
                  {
                    staticClass: "conversion-actions",
                    attrs: { href: "#" },
                    on: {
                      click: function($event) {
                        $event.preventDefault();
                        return _vm.make_compliance_info(_vm.make_supplier)
                      }
                    }
                  },
                  [_vm._v("Convert to supplier")]
                )
              : _vm._e()
          ])
        ]
      )
    };
    var __vue_staticRenderFns__$3 = [
      function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "col-md-3 col-sm-3 col-xs-3" }, [
          _c("div", { staticClass: "map" }, [
            _c("img", {
              attrs: { src: "./assets/bloomstack_core/images/map.png", alt: "" }
            }),
            _vm._v(" "),
            _c("span", [_vm._v("Click here to convert")])
          ])
        ])
      }
    ];
    __vue_render__$3._withStripped = true;

      /* style */
      var __vue_inject_styles__$3 = function (inject) {
        if (!inject) { return }
        inject("data-v-f1948478_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"License.vue"}, media: undefined });

      };
      /* scoped */
      var __vue_scope_id__$3 = undefined;
      /* module identifier */
      var __vue_module_identifier__ = undefined;
      /* functional template */
      var __vue_is_functional_template__$3 = false;
      /* component normalizer */
      function __vue_normalize__$3(
        template, style, script,
        scope, functional, moduleIdentifier,
        createInjector, createInjectorSSR
      ) {
        var component = (typeof script === 'function' ? script.options : script) || {};

        // For security concerns, we use only base name in production mode.
        component.__file = "/Users/jitendraharpalani/Jeet/workspace/bloomstack/apps/bloomstack_core/bloomstack_core/public/js/bloomstack_core/license_search/components/License.vue";

        if (!component.render) {
          component.render = template.render;
          component.staticRenderFns = template.staticRenderFns;
          component._compiled = true;

          if (functional) { component.functional = true; }
        }

        component._scopeId = scope;

        {
          var hook;
          if (style) {
            hook = function(context) {
              style.call(this, createInjector(context));
            };
          }

          if (hook !== undefined) {
            if (component.functional) {
              // register for functional component in vue file
              var originalRender = component.render;
              component.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context)
              };
            } else {
              // inject component registration as beforeCreate hook
              var existing = component.beforeCreate;
              component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
            }
          }
        }

        return component
      }
      /* style inject */
      function __vue_create_injector__() {
        var head = document.head || document.getElementsByTagName('head')[0];
        var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
        var isOldIE =
          typeof navigator !== 'undefined' &&
          /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

        return function addStyle(id, css) {
          if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

          var group = isOldIE ? css.media || 'default' : id;
          var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

          if (!style.ids.includes(id)) {
            var code = css.source;
            var index = style.ids.length;

            style.ids.push(id);

            if (isOldIE) {
              style.element = style.element || document.querySelector('style[data-group=' + group + ']');
            }

            if (!style.element) {
              var el = style.element = document.createElement('style');
              el.type = 'text/css';

              if (css.media) { el.setAttribute('media', css.media); }
              if (isOldIE) {
                el.setAttribute('data-group', group);
                el.setAttribute('data-next-index', '0');
              }

              head.appendChild(el);
            }

            if (isOldIE) {
              index = parseInt(style.element.getAttribute('data-next-index'));
              style.element.setAttribute('data-next-index', index + 1);
            }

            if (style.element.styleSheet) {
              style.parts.push(code);
              style.element.styleSheet.cssText = style.parts
                .filter(Boolean)
                .join('\n');
            } else {
              var textNode = document.createTextNode(code);
              var nodes = style.element.childNodes;
              if (nodes[index]) { style.element.removeChild(nodes[index]); }
              if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
              else { style.element.appendChild(textNode); }
            }
          }
        }
      }
      /* style inject SSR */
      

      
      var License = __vue_normalize__$3(
        { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
        __vue_inject_styles__$3,
        __vue_script__$3,
        __vue_scope_id__$3,
        __vue_is_functional_template__$3,
        __vue_module_identifier__,
        __vue_create_injector__);

    var dist = createCommonjsModule(function (module, exports) {
    !function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e){function t(s){if(n[s]){ return n[s].exports; }var a=n[s]={exports:{},id:s,loaded:!1};return e[s].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){function s(e){return e&&e.__esModule?e:{default:e}}var a=n(1),i=s(a);e.exports=i.default;},function(e,t,n){n(2);var s=n(6)(n(7),n(8),"data-v-82963a40",null);e.exports=s.exports;},function(e,t,n){var s=n(3);"string"==typeof s&&(s=[[e.id,s,""]]);n(5)(s,{});s.locals&&(e.exports=s.locals);},function(e,t,n){t=e.exports=n(4)(),t.push([e.id,"a[data-v-82963a40]{cursor:pointer}",""]);},function(e,t){e.exports=function(){var e=[];return e.toString=function(){for(var e=[],t=0;t<this.length;t++){var n=this[t];n[2]?e.push("@media "+n[2]+"{"+n[1]+"}"):e.push(n[1]);}return e.join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var s={},a=0;a<this.length;a++){var i=this[a][0];"number"==typeof i&&(s[i]=!0);}for(a=0;a<t.length;a++){var r=t[a];"number"==typeof r[0]&&s[r[0]]||(n&&!r[2]?r[2]=n:n&&(r[2]="("+r[2]+") and ("+n+")"),e.push(r));}},e};},function(e,t,n){function s(e,t){for(var n=0;n<e.length;n++){var s=e[n],a=c[s.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++){ a.parts[i](s.parts[i]); }for(;i<s.parts.length;i++){ a.parts.push(l(s.parts[i],t)); }}else {for(var r=[],i=0;i<s.parts.length;i++){ r.push(l(s.parts[i],t)); }c[s.id]={id:s.id,refs:1,parts:r};}}}function a(e){for(var t=[],n={},s=0;s<e.length;s++){var a=e[s],i=a[0],r=a[1],o=a[2],l=a[3],u={css:r,media:o,sourceMap:l};n[i]?n[i].parts.push(u):t.push(n[i]={id:i,parts:[u]});}return t}function i(e,t){var n=g(),s=C[C.length-1];if("top"===e.insertAt){ s?s.nextSibling?n.insertBefore(t,s.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),C.push(t); }else {if("bottom"!==e.insertAt){ throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'."); }n.appendChild(t);}}function r(e){e.parentNode.removeChild(e);var t=C.indexOf(e);t>=0&&C.splice(t,1);}function o(e){var t=document.createElement("style");return t.type="text/css",i(e,t),t}function l(e,t){var n,s,a;if(t.singleton){var i=v++;n=h||(h=o(t)),s=u.bind(null,n,i,!1),a=u.bind(null,n,i,!0);}else { n=o(t),s=d.bind(null,n),a=function(){r(n);}; }return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap){ return; }s(e=t);}else { a(); }}}function u(e,t,n,s){var a=n?"":s.css;if(e.styleSheet){ e.styleSheet.cssText=b(t,a); }else {var i=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(i,r[t]):e.appendChild(i);}}function d(e,t){var n=t.css,s=t.media,a=t.sourceMap;if(s&&e.setAttribute("media",s),a&&(n+="\n/*# sourceURL="+a.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet){ e.styleSheet.cssText=n; }else {for(;e.firstChild;){ e.removeChild(e.firstChild); }e.appendChild(document.createTextNode(n));}}var c={},p=function(e){var t;return function(){return "undefined"==typeof t&&(t=e.apply(this,arguments)),t}},f=p(function(){return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase())}),g=p(function(){return document.head||document.getElementsByTagName("head")[0]}),h=null,v=0,C=[];e.exports=function(e,t){t=t||{},"undefined"==typeof t.singleton&&(t.singleton=f()),"undefined"==typeof t.insertAt&&(t.insertAt="bottom");var n=a(e);return s(n,t),function(e){for(var i=[],r=0;r<n.length;r++){var o=n[r],l=c[o.id];l.refs--,i.push(l);}if(e){var u=a(e);s(u,t);}for(var r=0;r<i.length;r++){var l=i[r];if(0===l.refs){for(var d=0;d<l.parts.length;d++){ l.parts[d](); }delete c[l.id];}}}};var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();},function(e,t){e.exports=function(e,t,n,s){var a,i=e=e||{},r=typeof e.default;"object"!==r&&"function"!==r||(a=e,i=e.default);var o="function"==typeof i?i.options:i;if(t&&(o.render=t.render,o.staticRenderFns=t.staticRenderFns),n&&(o._scopeId=n),s){var l=o.computed||(o.computed={});Object.keys(s).forEach(function(e){var t=s[e];l[e]=function(){return t};});}return {esModule:a,exports:i,options:o}};},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{value:{type:Number},pageCount:{type:Number,required:!0},forcePage:{type:Number},clickHandler:{type:Function,default:function(){}},pageRange:{type:Number,default:3},marginPages:{type:Number,default:1},prevText:{type:String,default:"Prev"},nextText:{type:String,default:"Next"},breakViewText:{type:String,default:"…"},containerClass:{type:String},pageClass:{type:String},pageLinkClass:{type:String},prevClass:{type:String},prevLinkClass:{type:String},nextClass:{type:String},nextLinkClass:{type:String},breakViewClass:{type:String},breakViewLinkClass:{type:String},activeClass:{type:String,default:"active"},disabledClass:{type:String,default:"disabled"},noLiSurround:{type:Boolean,default:!1},firstLastButton:{type:Boolean,default:!1},firstButtonText:{type:String,default:"First"},lastButtonText:{type:String,default:"Last"},hidePrevNext:{type:Boolean,default:!1}},beforeUpdate:function(){void 0!==this.forcePage&&this.forcePage!==this.selected&&(this.selected=this.forcePage);},computed:{selected:{get:function(){return this.value||this.innerValue},set:function(e){this.innerValue=e;}},pages:function(){var e=this,t={};if(this.pageCount<=this.pageRange){ for(var n=0;n<this.pageCount;n++){var s={index:n,content:n+1,selected:n===this.selected-1};t[n]=s;} }else {for(var a=Math.floor(this.pageRange/2),i=function(n){var s={index:n,content:n+1,selected:n===e.selected-1};t[n]=s;},r=function(e){var n={disabled:!0,breakView:!0};t[e]=n;},o=0;o<this.marginPages;o++){ i(o); }var l=0;this.selected-a>0&&(l=this.selected-1-a);var u=l+this.pageRange-1;u>=this.pageCount&&(u=this.pageCount-1,l=u-this.pageRange+1);for(var d=l;d<=u&&d<=this.pageCount-1;d++){ i(d); }l>this.marginPages&&r(l-1),u+1<this.pageCount-this.marginPages&&r(u+1);for(var c=this.pageCount-1;c>=this.pageCount-this.marginPages;c--){ i(c); }}return t}},data:function(){return {innerValue:1}},methods:{handlePageSelected:function(e){this.selected!==e&&(this.innerValue=e,this.$emit("input",e),this.clickHandler(e));},prevPage:function(){this.selected<=1||this.handlePageSelected(this.selected-1);},nextPage:function(){this.selected>=this.pageCount||this.handlePageSelected(this.selected+1);},firstPageSelected:function(){return 1===this.selected},lastPageSelected:function(){return this.selected===this.pageCount||0===this.pageCount},selectFirstPage:function(){this.selected<=1||this.handlePageSelected(1);},selectLastPage:function(){this.selected>=this.pageCount||this.handlePageSelected(this.pageCount);}}};},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.noLiSurround?n("div",{class:e.containerClass},[e.firstLastButton?n("a",{class:[e.pageLinkClass,e.firstPageSelected()?e.disabledClass:""],attrs:{tabindex:"0"},domProps:{innerHTML:e._s(e.firstButtonText)},on:{click:function(t){e.selectFirstPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.selectFirstPage():null}}}):e._e(),e._v(" "),e.firstPageSelected()&&e.hidePrevNext?e._e():n("a",{class:[e.prevLinkClass,e.firstPageSelected()?e.disabledClass:""],attrs:{tabindex:"0"},domProps:{innerHTML:e._s(e.prevText)},on:{click:function(t){e.prevPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.prevPage():null}}}),e._v(" "),e._l(e.pages,function(t){return [t.breakView?n("a",{class:[e.pageLinkClass,e.breakViewLinkClass,t.disabled?e.disabledClass:""],attrs:{tabindex:"0"}},[e._t("breakViewContent",[e._v(e._s(e.breakViewText))])],2):t.disabled?n("a",{class:[e.pageLinkClass,t.selected?e.activeClass:"",e.disabledClass],attrs:{tabindex:"0"}},[e._v(e._s(t.content))]):n("a",{class:[e.pageLinkClass,t.selected?e.activeClass:""],attrs:{tabindex:"0"},on:{click:function(n){e.handlePageSelected(t.index+1);},keyup:function(n){return "button"in n||!e._k(n.keyCode,"enter",13)?void e.handlePageSelected(t.index+1):null}}},[e._v(e._s(t.content))])]}),e._v(" "),e.lastPageSelected()&&e.hidePrevNext?e._e():n("a",{class:[e.nextLinkClass,e.lastPageSelected()?e.disabledClass:""],attrs:{tabindex:"0"},domProps:{innerHTML:e._s(e.nextText)},on:{click:function(t){e.nextPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.nextPage():null}}}),e._v(" "),e.firstLastButton?n("a",{class:[e.pageLinkClass,e.lastPageSelected()?e.disabledClass:""],attrs:{tabindex:"0"},domProps:{innerHTML:e._s(e.lastButtonText)},on:{click:function(t){e.selectLastPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.selectLastPage():null}}}):e._e()],2):n("ul",{class:e.containerClass},[e.firstLastButton?n("li",{class:[e.pageClass,e.firstPageSelected()?e.disabledClass:""]},[n("a",{class:e.pageLinkClass,attrs:{tabindex:e.firstPageSelected()?-1:0},domProps:{innerHTML:e._s(e.firstButtonText)},on:{click:function(t){e.selectFirstPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.selectFirstPage():null}}})]):e._e(),e._v(" "),e.firstPageSelected()&&e.hidePrevNext?e._e():n("li",{class:[e.prevClass,e.firstPageSelected()?e.disabledClass:""]},[n("a",{class:e.prevLinkClass,attrs:{tabindex:e.firstPageSelected()?-1:0},domProps:{innerHTML:e._s(e.prevText)},on:{click:function(t){e.prevPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.prevPage():null}}})]),e._v(" "),e._l(e.pages,function(t){return n("li",{class:[e.pageClass,t.selected?e.activeClass:"",t.disabled?e.disabledClass:"",t.breakView?e.breakViewClass:""]},[t.breakView?n("a",{class:[e.pageLinkClass,e.breakViewLinkClass],attrs:{tabindex:"0"}},[e._t("breakViewContent",[e._v(e._s(e.breakViewText))])],2):t.disabled?n("a",{class:e.pageLinkClass,attrs:{tabindex:"0"}},[e._v(e._s(t.content))]):n("a",{class:e.pageLinkClass,attrs:{tabindex:"0"},on:{click:function(n){e.handlePageSelected(t.index+1);},keyup:function(n){return "button"in n||!e._k(n.keyCode,"enter",13)?void e.handlePageSelected(t.index+1):null}}},[e._v(e._s(t.content))])])}),e._v(" "),e.lastPageSelected()&&e.hidePrevNext?e._e():n("li",{class:[e.nextClass,e.lastPageSelected()?e.disabledClass:""]},[n("a",{class:e.nextLinkClass,attrs:{tabindex:e.lastPageSelected()?-1:0},domProps:{innerHTML:e._s(e.nextText)},on:{click:function(t){e.nextPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.nextPage():null}}})]),e._v(" "),e.firstLastButton?n("li",{class:[e.pageClass,e.lastPageSelected()?e.disabledClass:""]},[n("a",{class:e.pageLinkClass,attrs:{tabindex:e.lastPageSelected()?-1:0},domProps:{innerHTML:e._s(e.lastButtonText)},on:{click:function(t){e.selectLastPage();},keyup:function(t){return "button"in t||!e._k(t.keyCode,"enter",13)?void e.selectLastPage():null}}})]):e._e()],2)},staticRenderFns:[]};}])});
    });

    var Paginate = unwrapExports(dist);
    var dist_1 = dist.VuejsPaginate;

    //


    var script$4 = {
        components: {
            License: License,
            Paginate: Paginate
        },
        created: function created() {
            this.refreshView();
        },
        computed: Object.assign({}, vuex.mapState(['license'])),
        methods: {
            refreshView: function refreshView(page) {
                if ( page === void 0 ) page=1;

                this.$store.dispatch('updatePage', page);
            }
        }
    };

    /* script */
                var __vue_script__$4 = script$4;
                
    /* template */
    var __vue_render__$4 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { staticClass: "license-list" },
        [
          _vm._l(_vm.license.licenses, function(item) {
            return _c("License", {
              key: item.license_number,
              attrs: { license: item }
            })
          }),
          _vm._v(" "),
          _c("paginate", {
            attrs: {
              "page-count": _vm.license.totalPages,
              "click-handler": _vm.refreshView,
              "prev-text": "Prev",
              "next-text": "Next",
              "container-class": "paginate",
              "page-class": "page-item",
              pageNum: _vm.license.currentPage
            }
          })
        ],
        2
      )
    };
    var __vue_staticRenderFns__$4 = [];
    __vue_render__$4._withStripped = true;

      /* style */
      var __vue_inject_styles__$4 = function (inject) {
        if (!inject) { return }
        inject("data-v-11b13095_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"LicenseList.vue"}, media: undefined });

      };
      /* scoped */
      var __vue_scope_id__$4 = undefined;
      /* module identifier */
      var __vue_module_identifier__$1 = undefined;
      /* functional template */
      var __vue_is_functional_template__$4 = false;
      /* component normalizer */
      function __vue_normalize__$4(
        template, style, script,
        scope, functional, moduleIdentifier,
        createInjector, createInjectorSSR
      ) {
        var component = (typeof script === 'function' ? script.options : script) || {};

        // For security concerns, we use only base name in production mode.
        component.__file = "/Users/jitendraharpalani/Jeet/workspace/bloomstack/apps/bloomstack_core/bloomstack_core/public/js/bloomstack_core/license_search/components/LicenseList.vue";

        if (!component.render) {
          component.render = template.render;
          component.staticRenderFns = template.staticRenderFns;
          component._compiled = true;

          if (functional) { component.functional = true; }
        }

        component._scopeId = scope;

        {
          var hook;
          if (style) {
            hook = function(context) {
              style.call(this, createInjector(context));
            };
          }

          if (hook !== undefined) {
            if (component.functional) {
              // register for functional component in vue file
              var originalRender = component.render;
              component.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context)
              };
            } else {
              // inject component registration as beforeCreate hook
              var existing = component.beforeCreate;
              component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
            }
          }
        }

        return component
      }
      /* style inject */
      function __vue_create_injector__$1() {
        var head = document.head || document.getElementsByTagName('head')[0];
        var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
        var isOldIE =
          typeof navigator !== 'undefined' &&
          /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

        return function addStyle(id, css) {
          if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

          var group = isOldIE ? css.media || 'default' : id;
          var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

          if (!style.ids.includes(id)) {
            var code = css.source;
            var index = style.ids.length;

            style.ids.push(id);

            if (isOldIE) {
              style.element = style.element || document.querySelector('style[data-group=' + group + ']');
            }

            if (!style.element) {
              var el = style.element = document.createElement('style');
              el.type = 'text/css';

              if (css.media) { el.setAttribute('media', css.media); }
              if (isOldIE) {
                el.setAttribute('data-group', group);
                el.setAttribute('data-next-index', '0');
              }

              head.appendChild(el);
            }

            if (isOldIE) {
              index = parseInt(style.element.getAttribute('data-next-index'));
              style.element.setAttribute('data-next-index', index + 1);
            }

            if (style.element.styleSheet) {
              style.parts.push(code);
              style.element.styleSheet.cssText = style.parts
                .filter(Boolean)
                .join('\n');
            } else {
              var textNode = document.createTextNode(code);
              var nodes = style.element.childNodes;
              if (nodes[index]) { style.element.removeChild(nodes[index]); }
              if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
              else { style.element.appendChild(textNode); }
            }
          }
        }
      }
      /* style inject SSR */
      

      
      var LicenseList = __vue_normalize__$4(
        { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
        __vue_inject_styles__$4,
        __vue_script__$4,
        __vue_scope_id__$4,
        __vue_is_functional_template__$4,
        __vue_module_identifier__$1,
        __vue_create_injector__$1);

    //

    var script$5 = {
        components: {
            FilterForm: FilterForm,
            LicenseList: LicenseList
        }
    };

    /* script */
                var __vue_script__$5 = script$5;
                
    /* template */
    var __vue_render__$5 = function() {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { staticClass: "wrapper" },
        [_c("FilterForm"), _vm._v(" "), _c("LicenseList")],
        1
      )
    };
    var __vue_staticRenderFns__$5 = [];
    __vue_render__$5._withStripped = true;

      /* style */
      var __vue_inject_styles__$5 = undefined;
      /* scoped */
      var __vue_scope_id__$5 = undefined;
      /* functional template */
      var __vue_is_functional_template__$5 = false;
      /* component normalizer */
      function __vue_normalize__$5(
        template, style, script,
        scope, functional, moduleIdentifier,
        createInjector, createInjectorSSR
      ) {
        var component = (typeof script === 'function' ? script.options : script) || {};

        // For security concerns, we use only base name in production mode.
        component.__file = "/Users/jitendraharpalani/Jeet/workspace/bloomstack/apps/bloomstack_core/bloomstack_core/public/js/bloomstack_core/license_search/Home.vue";

        if (!component.render) {
          component.render = template.render;
          component.staticRenderFns = template.staticRenderFns;
          component._compiled = true;

          if (functional) { component.functional = true; }
        }

        component._scopeId = scope;

        return component
      }
      /* style inject */
      
      /* style inject SSR */
      

      
      var Home = __vue_normalize__$5(
        { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
        __vue_inject_styles__$5,
        __vue_script__$5,
        __vue_scope_id__$5,
        __vue_is_functional_template__$5);

    var LicenseService = {
        getLicenses: function getLicenses(ref) {
            var pageNum = ref.pageNum;
            var perPage = ref.perPage;
            var filters = ref.filters;

            return new Promise(function (resolve, reject) {
                frappe.call({
                    method: "bloomstack_core.bloomstack_core.page.license_search.license_search.get_all_licenses",
                    args: {
                        page_number: pageNum,
                        per_page: perPage,
                        filters: filters
                    },
                    callback: function(response) {
                        resolve(response.message);
                    }
                });
    		});


        }
    };

    var nprogress = createCommonjsModule(function (module, exports) {
    (function(root, factory) {

      {
        module.exports = factory();
      }

    })(commonjsGlobal, function() {
      var NProgress = {};

      NProgress.version = '0.2.0';

      var Settings = NProgress.settings = {
        minimum: 0.08,
        easing: 'ease',
        positionUsing: '',
        speed: 200,
        trickle: true,
        trickleRate: 0.02,
        trickleSpeed: 800,
        showSpinner: true,
        barSelector: '[role="bar"]',
        spinnerSelector: '[role="spinner"]',
        parent: 'body',
        template: '<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'
      };

      /**
       * Updates configuration.
       *
       *     NProgress.configure({
       *       minimum: 0.1
       *     });
       */
      NProgress.configure = function(options) {
        var key, value;
        for (key in options) {
          value = options[key];
          if (value !== undefined && options.hasOwnProperty(key)) { Settings[key] = value; }
        }

        return this;
      };

      /**
       * Last number.
       */

      NProgress.status = null;

      /**
       * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.
       *
       *     NProgress.set(0.4);
       *     NProgress.set(1.0);
       */

      NProgress.set = function(n) {
        var started = NProgress.isStarted();

        n = clamp(n, Settings.minimum, 1);
        NProgress.status = (n === 1 ? null : n);

        var progress = NProgress.render(!started),
            bar      = progress.querySelector(Settings.barSelector),
            speed    = Settings.speed,
            ease     = Settings.easing;

        progress.offsetWidth; /* Repaint */

        queue(function(next) {
          // Set positionUsing if it hasn't already been set
          if (Settings.positionUsing === '') { Settings.positionUsing = NProgress.getPositioningCSS(); }

          // Add transition
          css(bar, barPositionCSS(n, speed, ease));

          if (n === 1) {
            // Fade out
            css(progress, { 
              transition: 'none', 
              opacity: 1 
            });
            progress.offsetWidth; /* Repaint */

            setTimeout(function() {
              css(progress, { 
                transition: 'all ' + speed + 'ms linear', 
                opacity: 0 
              });
              setTimeout(function() {
                NProgress.remove();
                next();
              }, speed);
            }, speed);
          } else {
            setTimeout(next, speed);
          }
        });

        return this;
      };

      NProgress.isStarted = function() {
        return typeof NProgress.status === 'number';
      };

      /**
       * Shows the progress bar.
       * This is the same as setting the status to 0%, except that it doesn't go backwards.
       *
       *     NProgress.start();
       *
       */
      NProgress.start = function() {
        if (!NProgress.status) { NProgress.set(0); }

        var work = function() {
          setTimeout(function() {
            if (!NProgress.status) { return; }
            NProgress.trickle();
            work();
          }, Settings.trickleSpeed);
        };

        if (Settings.trickle) { work(); }

        return this;
      };

      /**
       * Hides the progress bar.
       * This is the *sort of* the same as setting the status to 100%, with the
       * difference being `done()` makes some placebo effect of some realistic motion.
       *
       *     NProgress.done();
       *
       * If `true` is passed, it will show the progress bar even if its hidden.
       *
       *     NProgress.done(true);
       */

      NProgress.done = function(force) {
        if (!force && !NProgress.status) { return this; }

        return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);
      };

      /**
       * Increments by a random amount.
       */

      NProgress.inc = function(amount) {
        var n = NProgress.status;

        if (!n) {
          return NProgress.start();
        } else {
          if (typeof amount !== 'number') {
            amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);
          }

          n = clamp(n + amount, 0, 0.994);
          return NProgress.set(n);
        }
      };

      NProgress.trickle = function() {
        return NProgress.inc(Math.random() * Settings.trickleRate);
      };

      /**
       * Waits for all supplied jQuery promises and
       * increases the progress as the promises resolve.
       *
       * @param $promise jQUery Promise
       */
      (function() {
        var initial = 0, current = 0;

        NProgress.promise = function($promise) {
          if (!$promise || $promise.state() === "resolved") {
            return this;
          }

          if (current === 0) {
            NProgress.start();
          }

          initial++;
          current++;

          $promise.always(function() {
            current--;
            if (current === 0) {
                initial = 0;
                NProgress.done();
            } else {
                NProgress.set((initial - current) / initial);
            }
          });

          return this;
        };

      })();

      /**
       * (Internal) renders the progress bar markup based on the `template`
       * setting.
       */

      NProgress.render = function(fromStart) {
        if (NProgress.isRendered()) { return document.getElementById('nprogress'); }

        addClass(document.documentElement, 'nprogress-busy');
        
        var progress = document.createElement('div');
        progress.id = 'nprogress';
        progress.innerHTML = Settings.template;

        var bar      = progress.querySelector(Settings.barSelector),
            perc     = fromStart ? '-100' : toBarPerc(NProgress.status || 0),
            parent   = document.querySelector(Settings.parent),
            spinner;
        
        css(bar, {
          transition: 'all 0 linear',
          transform: 'translate3d(' + perc + '%,0,0)'
        });

        if (!Settings.showSpinner) {
          spinner = progress.querySelector(Settings.spinnerSelector);
          spinner && removeElement(spinner);
        }

        if (parent != document.body) {
          addClass(parent, 'nprogress-custom-parent');
        }

        parent.appendChild(progress);
        return progress;
      };

      /**
       * Removes the element. Opposite of render().
       */

      NProgress.remove = function() {
        removeClass(document.documentElement, 'nprogress-busy');
        removeClass(document.querySelector(Settings.parent), 'nprogress-custom-parent');
        var progress = document.getElementById('nprogress');
        progress && removeElement(progress);
      };

      /**
       * Checks if the progress bar is rendered.
       */

      NProgress.isRendered = function() {
        return !!document.getElementById('nprogress');
      };

      /**
       * Determine which positioning CSS rule to use.
       */

      NProgress.getPositioningCSS = function() {
        // Sniff on document.body.style
        var bodyStyle = document.body.style;

        // Sniff prefixes
        var vendorPrefix = ('WebkitTransform' in bodyStyle) ? 'Webkit' :
                           ('MozTransform' in bodyStyle) ? 'Moz' :
                           ('msTransform' in bodyStyle) ? 'ms' :
                           ('OTransform' in bodyStyle) ? 'O' : '';

        if (vendorPrefix + 'Perspective' in bodyStyle) {
          // Modern browsers with 3D support, e.g. Webkit, IE10
          return 'translate3d';
        } else if (vendorPrefix + 'Transform' in bodyStyle) {
          // Browsers without 3D support, e.g. IE9
          return 'translate';
        } else {
          // Browsers without translate() support, e.g. IE7-8
          return 'margin';
        }
      };

      /**
       * Helpers
       */

      function clamp(n, min, max) {
        if (n < min) { return min; }
        if (n > max) { return max; }
        return n;
      }

      /**
       * (Internal) converts a percentage (`0..1`) to a bar translateX
       * percentage (`-100%..0%`).
       */

      function toBarPerc(n) {
        return (-1 + n) * 100;
      }


      /**
       * (Internal) returns the correct CSS for changing the bar's
       * position given an n percentage, and speed and ease from Settings
       */

      function barPositionCSS(n, speed, ease) {
        var barCSS;

        if (Settings.positionUsing === 'translate3d') {
          barCSS = { transform: 'translate3d('+toBarPerc(n)+'%,0,0)' };
        } else if (Settings.positionUsing === 'translate') {
          barCSS = { transform: 'translate('+toBarPerc(n)+'%,0)' };
        } else {
          barCSS = { 'margin-left': toBarPerc(n)+'%' };
        }

        barCSS.transition = 'all '+speed+'ms '+ease;

        return barCSS;
      }

      /**
       * (Internal) Queues a function to be executed.
       */

      var queue = (function() {
        var pending = [];
        
        function next() {
          var fn = pending.shift();
          if (fn) {
            fn(next);
          }
        }

        return function(fn) {
          pending.push(fn);
          if (pending.length == 1) { next(); }
        };
      })();

      /**
       * (Internal) Applies css properties to an element, similar to the jQuery 
       * css method.
       *
       * While this helper does assist with vendor prefixed property names, it 
       * does not perform any manipulation of values prior to setting styles.
       */

      var css = (function() {
        var cssPrefixes = [ 'Webkit', 'O', 'Moz', 'ms' ],
            cssProps    = {};

        function camelCase(string) {
          return string.replace(/^-ms-/, 'ms-').replace(/-([\da-z])/gi, function(match, letter) {
            return letter.toUpperCase();
          });
        }

        function getVendorProp(name) {
          var style = document.body.style;
          if (name in style) { return name; }

          var i = cssPrefixes.length,
              capName = name.charAt(0).toUpperCase() + name.slice(1),
              vendorName;
          while (i--) {
            vendorName = cssPrefixes[i] + capName;
            if (vendorName in style) { return vendorName; }
          }

          return name;
        }

        function getStyleProp(name) {
          name = camelCase(name);
          return cssProps[name] || (cssProps[name] = getVendorProp(name));
        }

        function applyCss(element, prop, value) {
          prop = getStyleProp(prop);
          element.style[prop] = value;
        }

        return function(element, properties) {
          var args = arguments,
              prop, 
              value;

          if (args.length == 2) {
            for (prop in properties) {
              value = properties[prop];
              if (value !== undefined && properties.hasOwnProperty(prop)) { applyCss(element, prop, value); }
            }
          } else {
            applyCss(element, args[1], args[2]);
          }
        }
      })();

      /**
       * (Internal) Determines if an element or space separated list of class names contains a class name.
       */

      function hasClass(element, name) {
        var list = typeof element == 'string' ? element : classList(element);
        return list.indexOf(' ' + name + ' ') >= 0;
      }

      /**
       * (Internal) Adds a class to an element.
       */

      function addClass(element, name) {
        var oldList = classList(element),
            newList = oldList + name;

        if (hasClass(oldList, name)) { return; } 

        // Trim the opening space.
        element.className = newList.substring(1);
      }

      /**
       * (Internal) Removes a class from an element.
       */

      function removeClass(element, name) {
        var oldList = classList(element),
            newList;

        if (!hasClass(element, name)) { return; }

        // Replace the class name.
        newList = oldList.replace(' ' + name + ' ', ' ');

        // Trim the opening and closing spaces.
        element.className = newList.substring(1, newList.length - 1);
      }

      /**
       * (Internal) Gets a space separated list of the class names on the element. 
       * The list is wrapped with a single space on each end to facilitate finding 
       * matches within the list.
       */

      function classList(element) {
        return (' ' + (element.className || '') + ' ').replace(/\s+/gi, ' ');
      }

      /**
       * (Internal) Removes an element from the DOM.
       */

      function removeElement(element) {
        element && element.parentNode && element.parentNode.removeChild(element);
      }

      return NProgress;
    });
    });

    var license = {
       state:{
          filters: {},
          licenseTypes: [],
          licenses: [],
          perPage: 20,
          currentPage: 1,
          totalPages: 0,

          leads: [],
          customers: [],
          suppliers: []
       },


       mutations:{
          SET_FILTER: function SET_FILTER(state, filters) {
             state.filters = filters;
          },
          SET_LICENSES: function SET_LICENSES(state, licenses) {
             state.licenses = licenses.license_info;
             state.totalPages = Math.ceil(Number(licenses.total_count)/state.perPage);
             state.licenseTypes = licenses.license_types;
          },
          SET_PAGE: function SET_PAGE(state, page) {
             state.currentPage = page;
          },

          ADD_LEAD: function ADD_LEAD(state, lead) {
             state.leads.push(lead);
          },
          ADD_CUSTOMER: function ADD_CUSTOMER(state, customer) {
             state.customers.push(customer);
          },
          ADD_SUPPLIER: function ADD_SUPPLIER(state, supplier) {
             state.suppliers.push(supplier);
          }
       },
       actions:{
          applyFilter: function applyFilter(ref, filters) {
             var commit = ref.commit;
             var dispatch = ref.dispatch;
             var state = ref.state;

             commit('SET_FILTER', filters);
             dispatch('fetchLicenses', {
                pageNum: state.currentPage
             });
          },
          updatePage: function updatePage(ref, page) {
             var commit = ref.commit;
             var dispatch = ref.dispatch;

             commit('SET_PAGE', page);
             dispatch('fetchLicenses', {
                pageNum: page
             });
          },
          fetchLicenses: function fetchLicenses(ref, data) {
             var commit = ref.commit;
             var state = ref.state;

             nprogress.start();
             data.filters = state.filters;
             data.perPage = state.perPage;
             LicenseService.getLicenses(data).then(function(response) {
                commit('SET_LICENSES', response);
                nprogress.done();
             });
          },
          makeLead: function makeLead(ref, lead) {
             var commit = ref.commit;
             var dispatch = ref.dispatch;
             var state = ref.state;

             FrappeService.insertDoc({
                doc: lead,
                isFieldExist: "customer_name"
             }).then(function(response) {
                commit('ADD_LEAD', response);
             });
          },
          makeCustomer: function makeCustomer(ref, customer) {
             var commit = ref.commit;
             var dispatch = ref.dispatch;

             FrappeService.insertDoc({
                doc: customer,
                isFieldExist: "customer_name"
             }).then(function(response) {
                commit('ADD_CUSTOMER', response);
             });
          },
          makeSupplier: function makeSupplier(ref, supplier) {
             var commit = ref.commit;
             var state = ref.state;

             FrappeService.insertDoc({
                doc: supplier,
                isFieldExist: "customer_name"
             }).then(function(response) {
                commit('ADD_SUPPLIER', response);
             });
          }
       }
    };

    var store = new vuex.Store({
       modules: {
          license: license
       }
    });

    frappe.provide('bloomstack_core.license_seach');

    bloomstack_core.license_seach = class LicenseSearch {
    	constructor(ref) {
    	var parent = ref.parent;

    		this.$parent = $(parent);
    		this.page = parent.page;
    		this.setup_header();
    		this.make_body();
    	}
    	make_body() {
    		this.$license_search_container = this.$parent.find('.layout-main');
    		new Vue({
    			store: store,
    			el: this.$license_search_container[0],
    			render: function (h) { return h(Home); },
    			data: {
    				'page': this.page
    			}
    		});
    	}
    	setup_header() {
    		this.page.set_title(__('License Search'));
    	}
    };

}());
//# sourceMappingURL=license_search.min.js.map
